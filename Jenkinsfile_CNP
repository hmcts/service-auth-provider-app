#!groovy

def secrets = [
    's2s-${env}':
        [
            secret('jwt-key', 'JWT_KEY'),
            secret('microservicekey-send-letter-tests', 'TEST_SERVICE_SECRET'),
            secret("microservicekey-cmcLegalFrontend",'MICROSERVICEKEYS_CMC_LEGAL_FRONTEND'),
            secret("microservicekey-cmcClaimStore",'MICROSERVICEKEYS_CMC_CLAIM_STORE'),
            secret("microservicekey-divorce",'MICROSERVICEKEYS_DIVORCE'),
            secret("microservicekey-divorce-frontend",'MICROSERVICEKEYS_DIVORCE_FRONTEND'),
            secret("microservicekey-divorceCcdSubmission",'MICROSERVICEKEYS_DIVORCE_CCD_SUBMISSION'),
            secret("microservicekey-divorceCcdValidation",'MICROSERVICEKEYS_DIVORCE_CCD_VALIDATION'),
            secret("microservicekey-divorceDocumentUpload",'MICROSERVICEKEYS_DIVORCE_DOCUMENT_UPLOAD'),
            secret("microservicekey-divorceDocumentGenerator",'MICROSERVICEKEYS_DIVORCE_DOCUMENT_GENERATOR'),
            secret("microservicekey-draftStoreTests",'MICROSERVICEKEYS_DRAFT_STORE_TESTS'),
            secret("microservicekey-platformJobScheduler",'MICROSERVICEKEYS_JOBSCHEDULER'),
            secret("microservicekey-reference",'MICROSERVICEKEYS_REFERENCE'),
            secret("microservicekey-sscs",'MICROSERVICEKEYS_SSCS'),
            secret("microservicekey-sscs-bulkscan",'MICROSERVICEKEYS_SSCS_BULKSCAN'),
            secret("microservicekey-sscs-tribunals-case",'MICROSERVICEKEYS_SSCS_TRIBUNALS_CASE'),
            secret("microservicekey-probate-frontend",'MICROSERVICEKEYS_PROBATE_FRONTEND'),
            secret("microservicekey-probate-backend",'MICROSERVICEKEYS_PROBATE_BACKEND'),
            secret("microservicekey-send-letter-consumer",'MICROSERVICEKEYS_SEND_LETTER_CONSUMER'),
            secret("microservicekey-send-letter-tests",'MICROSERVICEKEYS_SEND_LETTER_TESTS'),
            secret("microservicekey-em-gw",'MICROSERVICEKEYS_EM_GW'),
            secret("microservicekey-finrem-document-generator",'MICROSERVICEKEYS_FINREM_DOCUMENT_GENERATOR'),
            secret("microservicekey-finrem-notification-service",'MICROSERVICEKEYS_FINREM_NOTIFICATION_SERVICE'),
            secret("microservicekey-finrem-case-orchestration",'MICROSERVICEKEYS_FINREM_CASE_ORCHESTRATION'),
            secret("microservicekey-finrem-payment-service",'MICROSERVICEKEYS_FINREM_PAYMENT_SERVICE'),
            secret("microservicekey-finrem-ccd-data-migrator",'MICROSERVICEKEYS_FINREM_CCD_DATA_MIGRATOR'),
            secret("microservicekey-jui-webapp",'MICROSERVICEKEYS_JUI_WEBAPP'),
            secret("microservicekey-pui-webapp",'MICROSERVICEKEYS_PUI_WEBAPP'),
            secret("microservicekey-coh-cor",'MICROSERVICEKEYS_COH_COR'),
            secret("microservicekey-bulk-scan-processor",'MICROSERVICEKEYS_BULK_SCAN_PROCESSOR'),
            secret("microservicekey-bulk-scan-processor-tests",'MICROSERVICEKEYS_BULK_SCAN_PROCESSOR_TESTS'),
            secret("microservicekey-bulk-scan-orchestrator",'MICROSERVICEKEYS_BULK_SCAN_ORCHESTRATOR'),
            secret("microservicekey-bar-api",'MICROSERVICEKEYS_BAR_API'),
            secret("microservicekey-api-gw",'MICROSERVICEKEYS_API_GW'),
            secret("microservicekey-em-annotation-app",'MICROSERVICEKEYS_EM_ANNOTATION_APP'),
            secret("microservicekey-em-npa-app",'MICROSERVICEKEYS_EM_NPA_APP'),
            secret("microservicekey-cet",'MICROSERVICEKEYS_CET'),
            secret("microservicekey-cet-frontend",'MICROSERVICEKEYS_CET_FRONTEND'),
            secret("microservicekey-fpl-case-service",'MICROSERVICEKEYS_FPL_CASE_SERVICE'),
            secret("microservicekey-iac",'MICROSERVICEKEYS_IAC'),
            secret("microservicekey-em-stitching-api",'MICROSERVICEKEYS_EM_STITCHING_API'),
            secret("microservicekey-em-ccd-orchestrator",'MICROSERVICEKEYS_EM_CCD_ORCHESTRATOR'),
            secret("microservicekey-ccpay-bubble",'MICROSERVICEKEYS_CCPAY_BUBBLE'),
            secret("microservicekey-dg-template-management",'MICROSERVICEKEYS_DG_TEMPLATE_MANAGEMENT_API'),
            secret("microservicekey-dg-docassembly-api",'MICROSERVICEKEYS_DG_DOCASSEMBLY_API')

        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

@Library("Infrastructure")

def type = "java"
def product = "rpe"
def app = "service-auth-provider"

withPipeline(type, product, app) {
    enableSlackNotifications('#rpe-build-notices')
    loadVaultSecrets(secrets)
    enableDockerBuild()
    installCharts()
}
