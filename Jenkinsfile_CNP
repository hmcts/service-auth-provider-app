#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

def secrets = [
    's2s-${env}':
        [
            secret('jwt-key', 'JWTKEY'),
            secret('microservicekey-send-letter-tests', 'TEST_SERVICE_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

@Library("Infrastructure")

def type = "java"
def product = "rpe"
def component = "service-auth-provider"

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
env.PACT_BROKER_PORT = "443"
env.PACT_BROKER_SCHEME = "https"

def branchesToSync = ['demo', 'perftest', 'ithc']

withPipeline(type, product, component) {
    env.TEST_SERVICE_NAME =  "send_letter_tests"
    enableSlackNotifications('#platops-build-notices')
    loadVaultSecrets(secrets)
    enableAksStagingDeployment()
    disableLegacyDeployment()
    syncBranchesWithMaster(branchesToSync)

    onMaster() {
        env.PACT_BRANCH_NAME = "master"
        enablePactAs([AppPipelineDsl.PactRoles.PROVIDER])
    }
}
