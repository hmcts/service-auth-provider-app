buildscript {
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }

  repositories {
    jcenter()
  }
}

apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'java'

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }
}
dependencies {

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
  compile group: 'com.google.guava', name: 'guava', version: '21.0'
  compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.7.0'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
  compile group: 'com.warrenstrange', name: 'googleauth', version: '1.1.2'

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
  functionalTestCompile group: 'com.typesafe', name: 'config', version: '1.3.3'
  functionalTestCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'

  testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion) {
    exclude(module: 'commons-logging')
  }

}

installDist {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

run {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
  mainClassName = 'uk.gov.hmcts.auth.provider.service.api.ServiceAuthProviderApplication'
}

jar {
  archiveName 'service-auth-provider.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

task printVersion {
  doLast {
    print project.version
  }
}

compileFunctionalTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

task functionalTest(type: Test, group: 'Verification') {
  description = 'Runs the functional tests'
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

assemble.doLast {
  copy {
    from('build/libs/') {
      include 'service-auth-provider.jar'
    }
    into '../build/libs'
  }
}
