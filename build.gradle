plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'com.github.ben-manes.versions' version '0.27.0'
  id 'org.owasp.dependencycheck' version '5.2.4'
  id 'org.sonarqube' version '2.8'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'org.springframework.boot' version '2.2.1.RELEASE'
}

group = 'uk.gov.hmcts.auth.provider.service'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }
}

repositories {
  jcenter()
  mavenLocal()
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
        }
      }

      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Service Auth Provider"
    property 'sonar.coverage.exclusions', "**/config/**"
  }
}

def versions = [
  springBoot: plugins.getPlugin('org.springframework.boot').class.package.implementationVersion,
  springfoxSwagger: '2.9.2',
  reformLogging: '5.1.0',
]

ext["rest-assured.version"] = '4.0.0'

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
  compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
  compile group: 'com.warrenstrange', name: 'googleauth', version: '1.2.0'
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'


  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.14.0'

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  functionalTestCompile group: 'com.typesafe', name: 'config', version: '1.4.0'
  functionalTestCompile group: 'io.rest-assured', name: 'rest-assured'

  testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude(module: 'commons-logging')
  }
}

mainClassName = 'uk.gov.hmcts.auth.provider.service.api.ServiceAuthProviderApplication'

installDist {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

run {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

bootJar {
  archiveName = 'service-auth-provider.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

task printVersion {
  doLast {
    print project.version
  }
}

compileFunctionalTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

task functional(type: Test, group: 'Verification') {
  description = "Runs Functional Tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task smoke(type: Test, group: 'Verification') {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled true
    html.enabled true
    html.destination file("${buildDir}/reports/jacoco")
    csv.enabled false
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

