plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'org.owasp.dependencycheck' version '6.4.1.1'
  id 'org.sonarqube' version '3.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.5.7'
  id 'au.com.dius.pact' version '4.2.14'
}

group = 'uk.gov.hmcts.auth.provider.service'

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }
  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
      }

      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

dependencyManagement {
  dependencies {

    //CVE-2021-22112
    dependencySet(group: 'org.springframework.security', version: '5.6.0') {
      entry 'spring-security-crypto'
    }
  }
}
sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Service Auth Provider"
    property 'sonar.coverage.exclusions', "**/config/**"
  }
}

def versions = [
  springBoot: plugins.getPlugin('org.springframework.boot').class.package.implementationVersion,
  springfoxSwagger: '2.9.2',
  reformLogging: '5.1.7',
  pact_version: '4.1.7',
  junit_jupiter: '5.7.1'
]

ext["rest-assured.version"] = '4.3.0'

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'org.codehaus.groovy') {
        details.useVersion "3.0.2"
        details.because "needed by rest-assured>=4.3"
      }
      if (details.requested.group in ['org.apache.tomcat.embed']) {
        details.useVersion '9.0.54'
      }

      /*  CVE-2021-29425 */
      if (details.requested.name == 'commons-io') {
        details.useVersion '2.11.0'
      }

      /*  CVE-2020-17521 */
      if (details.requested.name == 'groovy'|| details.requested.name == 'groovy-json'|| details.requested.name == 'groovy-xml') {
        details.useVersion '3.0.8'
      }

      /*  CVE-2018-10237, CVE-2020-8908 */
      if (details.requested.name == 'guava') {
        details.useVersion '30.1.1-jre'
      }

      /*    CVE-2021-28657 */
      if (details.requested.name == 'tika-core') {
        details.useVersion '2.0.0'
      }
    }
  }
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
  implementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.1'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

  compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'

  testImplementation group: 'junit', name: 'junit', version: '4.13.2'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  functionalTestImplementation group: 'com.typesafe', name: 'config', version: '1.4.1'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured'
  functionalTestImplementation group: 'junit', name: 'junit', version: '4.13.2'

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  contractTestImplementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit_jupiter
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.8.1'

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude(module: 'commons-logging')
  }
}

mainClassName = 'uk.gov.hmcts.auth.provider.service.api.ServiceAuthProviderApplication'

installDist {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

run {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

bootJar {
  archiveFileName = 'service-auth-provider.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

task printVersion {
  doLast {
    print project.version
  }
}

compileFunctionalTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

task functional(type: Test, group: 'Verification') {
  description = "Runs Functional Tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task smoke(type: Test, group: 'Verification') {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task contractTest(type: Test) {
  logger.lifecycle("Runnning contract Tests")
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runProviderPactVerification.dependsOn contractTest

runProviderPactVerification.finalizedBy pactVerify


jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    html.required = true
    html.destination file("${buildDir}/reports/jacoco")
    csv.required = false
  }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
