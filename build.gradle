plugins {
  id 'org.sonarqube' version '2.6.1'
}

ext {
  springBootVersion = '1.5.6.RELEASE'
}

def versions = [
  reformLogging: '2.0.2',
  logback: '1.2.3'
]

allprojects {
  group = 'uk.gov.hmcts.auth.provider.service'
  apply plugin: 'jacoco'
  apply plugin: 'java'
}

subprojects {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  repositories {
    mavenLocal()
    jcenter()

    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
  }

  dependencies {
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
    compile group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
    compile group: 'ch.qos.logback', name: 'logback-core', version: versions.logback

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.5.2'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'
  }
}

task codeCoverageReport(type: JacocoReport) {

  // Gather execution data from all sub projects
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant sourcesets from the subprojects
  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    html.enabled true
    html.destination file("${buildDir}/reports/jacoco")
    csv.enabled false
  }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
  subprojects*.test
}

task smoke(type: GradleBuild) {
  description = "Runs Smoke Tests"
  buildFile = './api/build.gradle'
  tasks = ['smokeTest']
}

task functional(type: GradleBuild) {
  description = "Runs Functional Tests"
  buildFile = './api/build.gradle'
  tasks = ['functionalTest']
}

jar.enabled=false
