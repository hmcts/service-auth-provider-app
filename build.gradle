plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'se.patrikerdes.use-latest-versions' version '0.2.18'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.owasp.dependencycheck' version '9.0.10'
  id 'org.sonarqube' version '5.0.0.4638'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.springframework.boot' version '3.2.0'
  id 'au.com.dius.pact' version '4.6.7'
}

group = 'uk.gov.hmcts.auth.provider.service'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

dependencyManagement {
    dependencies {

        //CVE-2022-25857, CVE-2022-38749, CVE-2022-38750, CVE-2022-38751, CVE-2022-38752, CVE-2022-41854
        dependencySet(group: 'org.yaml', version: '2.2') {
            entry 'snakeyaml'
        }
    }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }
  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
  suppressionFile = 'dependency-check-suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }

  skipConfigurations = [
    "compileOnly",
    "pmd",
    "integrationTest",
    "functionalTest",
    "smokeTest",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
      }

      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Service Auth Provider"
    property 'sonar.coverage.exclusions', "**/config/**"
  }
}

def versions = [
  pact_version: '4.6.7',
  junit_jupiter: '5.10.2'
]

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group == 'ch.qos.logback') {
        details.useVersion '1.4.14'
      }
    }
  }
}

ext {
  log4JVersion = "2.22.0"
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'com.google.guava', name: 'guava', version: '33.1.0-jre'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  implementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.4'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.4.0'

  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'

  compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'

  testImplementation group: 'junit', name: 'junit', version: '4.13.2'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  functionalTestImplementation group: 'com.typesafe', name: 'config', version: '1.4.3'
  functionalTestImplementation group: 'io.rest-assured', name: 'rest-assured'
  functionalTestImplementation group: 'junit', name: 'junit', version: '4.13.2'

  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring6', version: versions.pact_version
  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  contractTestImplementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
  contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit_jupiter
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit_jupiter
  contractTestRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-commons', version: '1.10.2'

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test'){
    exclude(module: 'commons-logging')
  }
}

mainClassName = 'uk.gov.hmcts.auth.provider.service.api.ServiceAuthProviderApplication'

installDist {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

run {
  applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
}

bootJar {
  archiveFileName = 'service-auth-provider.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

task printVersion {
  doLast {
    print project.version
  }
}

compileFunctionalTestJava {
  options.compilerArgs << "-Xlint:unchecked"
}

task functional(type: Test, group: 'Verification') {
  description = "Runs Functional Tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task smoke(type: Test, group: 'Verification') {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task contractTest(type: Test) {
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

task runProviderPactVerification(type: Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runProviderPactVerification.dependsOn contractTest

runProviderPactVerification.finalizedBy pactVerify

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

tasks.named('sonarqube') {
  dependsOn jacocoTestReport
}

tasks.named('sonar') {
  dependsOn jacocoTestReport
}


wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
